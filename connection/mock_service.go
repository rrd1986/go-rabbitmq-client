// Code generated by MockGen. DO NOT EDIT.
// Source: src/rabbitmq/connection/service.go

// Package connection is a generated GoMock package.
package connection

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	amqp "github.com/streadway/amqp"
)

// MockAmqpConnectionType is a mock of AmqpConnectionType interface.
type MockAmqpConnectionType struct {
	ctrl     *gomock.Controller
	recorder *MockAmqpConnectionTypeMockRecorder
}

// MockAmqpConnectionTypeMockRecorder is the mock recorder for MockAmqpConnectionType.
type MockAmqpConnectionTypeMockRecorder struct {
	mock *MockAmqpConnectionType
}

// NewMockAmqpConnectionType creates a new mock instance.
func NewMockAmqpConnectionType(ctrl *gomock.Controller) *MockAmqpConnectionType {
	mock := &MockAmqpConnectionType{ctrl: ctrl}
	mock.recorder = &MockAmqpConnectionTypeMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAmqpConnectionType) EXPECT() *MockAmqpConnectionTypeMockRecorder {
	return m.recorder
}

// Close mocks base method.
func (m *MockAmqpConnectionType) Close(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockAmqpConnectionTypeMockRecorder) Close(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockAmqpConnectionType)(nil).Close), ctx)
}

// GetConfig mocks base method.
func (m *MockAmqpConnectionType) GetConfig(ctx context.Context) *Config {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetConfig", ctx)
	ret0, _ := ret[0].(*Config)
	return ret0
}

// GetConfig indicates an expected call of GetConfig.
func (mr *MockAmqpConnectionTypeMockRecorder) GetConfig(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetConfig", reflect.TypeOf((*MockAmqpConnectionType)(nil).GetConfig), ctx)
}

// Open mocks base method.
func (m *MockAmqpConnectionType) Open(ctx context.Context) (*amqp.Connection, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Open", ctx)
	ret0, _ := ret[0].(*amqp.Connection)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Open indicates an expected call of Open.
func (mr *MockAmqpConnectionTypeMockRecorder) Open(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Open", reflect.TypeOf((*MockAmqpConnectionType)(nil).Open), ctx)
}
