// Code generated by MockGen. DO NOT EDIT.
// Source: src/rabbitmq/client/service.go

// Package client is a generated GoMock package.
package client

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	amqp "github.com/streadway/amqp"
)

// MockAmqpClientType is a mock of AmqpClientType interface.
type MockAmqpClientType struct {
	ctrl     *gomock.Controller
	recorder *MockAmqpClientTypeMockRecorder
}

// MockAmqpClientTypeMockRecorder is the mock recorder for MockAmqpClientType.
type MockAmqpClientTypeMockRecorder struct {
	mock *MockAmqpClientType
}

// NewMockAmqpClientType creates a new mock instance.
func NewMockAmqpClientType(ctrl *gomock.Controller) *MockAmqpClientType {
	mock := &MockAmqpClientType{ctrl: ctrl}
	mock.recorder = &MockAmqpClientTypeMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAmqpClientType) EXPECT() *MockAmqpClientTypeMockRecorder {
	return m.recorder
}

// DeclareDeadLetterRouting mocks base method.
func (m *MockAmqpClientType) DeclareDeadLetterRouting(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeclareDeadLetterRouting", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeclareDeadLetterRouting indicates an expected call of DeclareDeadLetterRouting.
func (mr *MockAmqpClientTypeMockRecorder) DeclareDeadLetterRouting(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeclareDeadLetterRouting", reflect.TypeOf((*MockAmqpClientType)(nil).DeclareDeadLetterRouting), ctx)
}

// DeclareQueueRouting mocks base method.
func (m *MockAmqpClientType) DeclareQueueRouting(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeclareQueueRouting", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeclareQueueRouting indicates an expected call of DeclareQueueRouting.
func (mr *MockAmqpClientTypeMockRecorder) DeclareQueueRouting(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeclareQueueRouting", reflect.TypeOf((*MockAmqpClientType)(nil).DeclareQueueRouting), ctx)
}

// DeclareRoutingTopology mocks base method.
func (m *MockAmqpClientType) DeclareRoutingTopology(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeclareRoutingTopology", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeclareRoutingTopology indicates an expected call of DeclareRoutingTopology.
func (mr *MockAmqpClientTypeMockRecorder) DeclareRoutingTopology(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeclareRoutingTopology", reflect.TypeOf((*MockAmqpClientType)(nil).DeclareRoutingTopology), ctx)
}

// GetChannel mocks base method.
func (m *MockAmqpClientType) GetChannel(ctx context.Context) *amqp.Channel {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetChannel", ctx)
	ret0, _ := ret[0].(*amqp.Channel)
	return ret0
}

// GetChannel indicates an expected call of GetChannel.
func (mr *MockAmqpClientTypeMockRecorder) GetChannel(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetChannel", reflect.TypeOf((*MockAmqpClientType)(nil).GetChannel), ctx)
}

// GetDeadLetterQueueName mocks base method.
func (m *MockAmqpClientType) GetDeadLetterQueueName(ctx context.Context) string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDeadLetterQueueName", ctx)
	ret0, _ := ret[0].(string)
	return ret0
}

// GetDeadLetterQueueName indicates an expected call of GetDeadLetterQueueName.
func (mr *MockAmqpClientTypeMockRecorder) GetDeadLetterQueueName(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDeadLetterQueueName", reflect.TypeOf((*MockAmqpClientType)(nil).GetDeadLetterQueueName), ctx)
}

// GetDeadLetterRoutingKey mocks base method.
func (m *MockAmqpClientType) GetDeadLetterRoutingKey(ctx context.Context) string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDeadLetterRoutingKey", ctx)
	ret0, _ := ret[0].(string)
	return ret0
}

// GetDeadLetterRoutingKey indicates an expected call of GetDeadLetterRoutingKey.
func (mr *MockAmqpClientTypeMockRecorder) GetDeadLetterRoutingKey(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDeadLetterRoutingKey", reflect.TypeOf((*MockAmqpClientType)(nil).GetDeadLetterRoutingKey), ctx)
}

// GetExchangeName mocks base method.
func (m *MockAmqpClientType) GetExchangeName(ctx context.Context) string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetExchangeName", ctx)
	ret0, _ := ret[0].(string)
	return ret0
}

// GetExchangeName indicates an expected call of GetExchangeName.
func (mr *MockAmqpClientTypeMockRecorder) GetExchangeName(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetExchangeName", reflect.TypeOf((*MockAmqpClientType)(nil).GetExchangeName), ctx)
}

// GetQueueName mocks base method.
func (m *MockAmqpClientType) GetQueueName(ctx context.Context) string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetQueueName", ctx)
	ret0, _ := ret[0].(string)
	return ret0
}

// GetQueueName indicates an expected call of GetQueueName.
func (mr *MockAmqpClientTypeMockRecorder) GetQueueName(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetQueueName", reflect.TypeOf((*MockAmqpClientType)(nil).GetQueueName), ctx)
}

// GetRoutingKey mocks base method.
func (m *MockAmqpClientType) GetRoutingKey(ctx context.Context) string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRoutingKey", ctx)
	ret0, _ := ret[0].(string)
	return ret0
}

// GetRoutingKey indicates an expected call of GetRoutingKey.
func (mr *MockAmqpClientTypeMockRecorder) GetRoutingKey(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRoutingKey", reflect.TypeOf((*MockAmqpClientType)(nil).GetRoutingKey), ctx)
}
